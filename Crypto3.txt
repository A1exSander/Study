Итак создадим переменную типа String создадим массив[](горшок) и назовем flowers.

String[] flowers;

Или если кому-то удобно (из других языков) можно записать вот так: String flowers[];

Каждый массив и элемент в нем является объектом. Для того чтобы явно создать объект нужно написать вот так (выдержу паузу, чтобы дать возможность Вам самим подумать, как это будет)…..

kirkl.png

 

Теперь проверим:

String [] flowers = new String[];

Почему мы не дублируем название массива, как это делали с классами? В случае с классами, название и определяет его тип, т.е. мы назвали class Flowers f и объект который мы создаем(new Flowers()) у нас будет типа flowers с названием f.  Eсли это касается массива, то создаваемый объект будет типа String, как и все элементы в нем, а название flowers. При инициализации объекта явно определяется только его тип.

При этом мы можем сразу посадить цветочки в горшочки [9]. Цветов у нас 10 и горшков 10, а в массиве стоит цифра 9? А это все потому, что индексация(нумерация) массива начинается не с 1, а с нуля, т.е. первый элемент (цветок) будет под номером 0, второй – 1, третий – 2 и т.д.

Получается  String [] flowers = new String[10];

А теперь присвоим некоторым элементам (цветочкам) определенный цвет:

flowers[0] = «red»;

flowers[1] = «green»;

flowers[2] = «broun»;

Выведем на экран:

System.out.print(flowers[0]);

Открываем текстовый редактор или то, что Вам удобно для написания программ, и пробуем написать программу, которая выводит на экран элементы массива.

Для начала вспоминаем, что любая программа должна начинаться с основного класса, название которого совпадает с названием файла (.java), который мы сохраним. Затем обязательный метод main, в котором мы определим массив и элементы в нем, а затем выведем на экран.

 

public class text{

public static void main(String[]args){

String[] flowers = new String[10];

flowers[0] = «red»;

flowers[1] = «green»;

flowers[2] = «broun»;

 

System.out.print(flowers[1]);